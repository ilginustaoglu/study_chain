<!-- Theme Switcher -->
<div class="theme-switcher">
  <span class="theme-switcher-label">Theme:</span>
  <button class="theme-toggle-button" onclick="toggleTheme()">
    <span class="theme-icon" id="themeIcon">üåô</span>
    <span id="themeText">Dark</span>
  </button>
</div>

<div class="library-container">
  <!-- Timers (Top Left) -->
  <div class="timers-panel">
    <div class="timer-box">
      <div class="timer-header"> ‚è±Ô∏è Study </div>
      <div class="timer-display" id="timer1-display">00:00:00</div>
      <div class="timer-controls">
        <button class="timer-btn" id="toggle-btn-1" onclick="toggleTimer(1)"><i class="fa-solid fa-play"></i></button>
        <button class="timer-btn" onclick="resetTimer(1)"><i class="fa-solid fa-reply"></i></button>
      </div>
      <div class="timer-alarm">
        <input type="time" id="timer1-alarm" class="alarm-input" placeholder="Set Alarm">
        <button class="alarm-btn" onclick="setAlarm(1)">üîî</button>
      </div>
    </div>
    
    <div class="timer-box">
      <div class="timer-header"> ‚è±Ô∏è Break </div>
      <div class="timer-display" id="timer2-display">00:00:00</div>
      <div class="timer-controls">
        <button class="timer-btn" id="toggle-btn-2" onclick="toggleTimer(2)"><i class="fa-solid fa-play"></i></button>
        <button class="timer-btn" onclick="resetTimer(2)"><i class="fa-solid fa-reply"></i></button>
      </div>
      <div class="timer-alarm">
        <input type="time" id="timer2-alarm" class="alarm-input" placeholder="Set Alarm">
        <button class="alarm-btn" onclick="setAlarm(2)">üîî</button>
      </div>
    </div>
  </div>

  <!-- Study Notes (Top Right) -->
  <div class="todo-panel">
    <div class="todo-header">
      <h2> üìù Notes </h2>
      <button class="btn-add" onclick="showAddForm()"> + Add New </button>
    </div>

    <!-- Add New Note Form -->
    <div id="addForm" class="add-form" style="display: none;">
      <%= form_with model: Home.new, local: true, class: "todo-form" do |f| %>
        <%= f.text_field :title, placeholder: "Title", class: "form-input", required: true %>
        <%= f.text_area :content, placeholder: "Content (details)", class: "form-textarea", rows: 3, required: true %>
        <div class="form-actions">
          <%= f.submit "Save", class: "btn-save" %>
          <button type="button" class="btn-cancel" onclick="hideAddForm()">Cancel</button>
        </div>
      <% end %>
    </div>

    <!-- Notes List -->
    <div class="todo-list">
      <% if @homes.empty? %>
        <p class="empty-message">No notes yet. You can add a new note using the button above.</p>
      <% else %>
        <% @homes.each do |home| %>
          <div class="todo-item">
            <div class="todo-item-header" onclick="showModal(<%= home.id %>)">
              <h3><%= home.title %></h3>
              <span class="click-hint">Click for details</span>
            </div>
            <div class="todo-actions">
              <%= link_to "‚úèÔ∏è", edit_home_path(home), class: "btn-edit", title: "Edit" %>
              <%= link_to "üóëÔ∏è", home_path(home), method: :delete, data: { confirm: "Are you sure you want to delete?" }, class: "btn-delete", title: "Delete" %>
            </div>
          </div>
        <% end %>
      <% end %>
    </div>
  </div>

  <!-- Modal Window -->
  <div id="todoModal" class="modal">
    <div class="modal-content">
      <span class="modal-close" onclick="closeModal()">&times;</span>
      <div id="modalBody">
        <!-- Modal content will be filled by JavaScript -->
      </div>
    </div>
  </div>
</div>

<script>
  // Show modal
  function showModal(homeId) {
    const modal = document.getElementById('todoModal');
    const modalBody = document.getElementById('modalBody');
    
    // Fetch note details via AJAX
    fetch(`/homes/${homeId}.json`)
      .then(response => response.json())
      .then(data => {
        modalBody.innerHTML = `
          <h2>${data.title}</h2>
          <div class="modal-content-text">
            <p>${data.content.replace(/\n/g, '<br>')}</p>
          </div>
          <div class="modal-footer">
            <small>Created: ${new Date(data.created_at).toLocaleString('en-US')}</small>
          </div>
        `;
        modal.style.display = 'block';
      })
      .catch(error => {
        console.error('Error:', error);
        modalBody.innerHTML = '<p>An error occurred while loading.</p>';
        modal.style.display = 'block';
      });
  }

  // Close modal
  function closeModal() {
    document.getElementById('todoModal').style.display = 'none';
  }

  // Close modal when clicking outside
  window.onclick = function(event) {
    const modal = document.getElementById('todoModal');
    if (event.target == modal) {
      closeModal();
    }
  }

  // Show/hide form
  function showAddForm() {
    document.getElementById('addForm').style.display = 'block';
  }

  function hideAddForm() {
    document.getElementById('addForm').style.display = 'none';
  }

  // Close modal with ESC key
  document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
      closeModal();
      hideAddForm();
      closeFloatingMenu();
    }
  });

  // Timer functionality
  const timers = {
    1: { seconds: 0, interval: null, alarm: null, running: false },
    2: { seconds: 0, interval: null, alarm: null, running: false }
  };

  function formatTime(seconds) {
    const hrs = Math.floor(seconds / 3600);
    const mins = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    return `${String(hrs).padStart(2, '0')}:${String(mins).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
  }

  function updateDisplay(timerNum) {
    document.getElementById(`timer${timerNum}-display`).textContent = formatTime(timers[timerNum].seconds);
  }

  function updateToggleButton(timerNum, isRunning) {
    const toggleBtn = document.getElementById(`toggle-btn-${timerNum}`);
    if (toggleBtn) {
      toggleBtn.innerHTML = isRunning ? '<i class="fa-solid fa-pause"></i>' : '<i class="fa-solid fa-play"></i>';
    }
  }

  function toggleTimer(timerNum) {
    if (timers[timerNum].running) {
      pauseTimer(timerNum);
    } else {
      startTimer(timerNum);
    }
  }

  function startTimer(timerNum) {
    if (timers[timerNum].running) return;
    
    timers[timerNum].running = true;
    updateToggleButton(timerNum, true);
    timers[timerNum].interval = setInterval(() => {
      timers[timerNum].seconds++;
      updateDisplay(timerNum);
      checkAlarm(timerNum);
    }, 1000);
  }

  function pauseTimer(timerNum) {
    timers[timerNum].running = false;
    updateToggleButton(timerNum, false);
    if (timers[timerNum].interval) {
      clearInterval(timers[timerNum].interval);
      timers[timerNum].interval = null;
    }
  }

  function resetTimer(timerNum) {
    pauseTimer(timerNum);
    timers[timerNum].seconds = 0;
    updateDisplay(timerNum);
  }

  function setAlarm(timerNum) {
    const alarmInput = document.getElementById(`timer${timerNum}-alarm`);
    const alarmTime = alarmInput.value;
    
    if (!alarmTime) {
      alert('Please set an alarm time');
      return;
    }

    const [hours, minutes] = alarmTime.split(':').map(Number);
    const alarmSeconds = (hours * 3600) + (minutes * 60);
    timers[timerNum].alarm = alarmSeconds;
    
    alert(`Alarm set for Timer ${timerNum} at ${alarmTime}`);
  }

  function checkAlarm(timerNum) {
    if (timers[timerNum].alarm && timers[timerNum].seconds === timers[timerNum].alarm) {
      pauseTimer(timerNum);
      
      // Play alarm sound (browser notification)
      if ('Notification' in window && Notification.permission === 'granted') {
        new Notification(`Timer ${timerNum} Alarm!`, {
          body: 'Your alarm time has been reached!',
          icon: '‚è∞'
        });
      }
      
      // Alert
      alert(`‚è∞ Timer ${timerNum} Alarm!\nTime's up!`);
      
      // Reset alarm
      timers[timerNum].alarm = null;
    }
  }

  // Request notification permission on load
  if ('Notification' in window && Notification.permission === 'default') {
    Notification.requestPermission();
  }

  // ============================================
  // THEME SWITCHER FUNCTIONALITY
  // ============================================
  
  // Get saved theme or default to light
  function getTheme() {
    return localStorage.getItem('theme') || 'light';
  }

  // Set theme
  function setTheme(theme) {
    document.documentElement.setAttribute('data-theme', theme);
    localStorage.setItem('theme', theme);
    updateThemeButton(theme);
  }

  // Update theme button text and icon
  function updateThemeButton(theme) {
    const themeIcon = document.getElementById('themeIcon');
    const themeText = document.getElementById('themeText');
    
    if (theme === 'dark') {
      themeIcon.textContent = '‚òÄÔ∏è';
      themeText.textContent = 'Light';
    } else {
      themeIcon.textContent = 'üåô';
      themeText.textContent = 'Dark';
    }
  }

  // Toggle theme
  function toggleTheme() {
    const currentTheme = getTheme();
    const newTheme = currentTheme === 'light' ? 'dark' : 'light';
    setTheme(newTheme);
  }

  // Initialize theme on page load
  (function initTheme() {
    const savedTheme = getTheme();
    setTheme(savedTheme);
  })();

  // Floating menu kontrol√º
  function toggleFloatingMenu() {
    const menu = document.getElementById('floatingMenu');
    const isVisible = menu.style.display === 'block';
    menu.style.display = isVisible ? 'none' : 'block';
  }

  function closeFloatingMenu() {
    document.getElementById('floatingMenu').style.display = 'none';
  }

  // Close menu when clicking outside
  document.addEventListener('click', function(event) {
    const menu = document.getElementById('floatingMenu');
    const button = document.getElementById('floatingButton');
    
    if (!menu.contains(event.target) && !button.contains(event.target)) {
      closeFloatingMenu();
    }
  });
</script>

<!-- Floating Menu Button -->
<div id="floatingButton" onclick="toggleFloatingMenu()" class="floating-button">
  <span style="color: white; font-size: 2em; font-weight: bold;">‚ãÆ</span>
</div>

<!-- Floating Menu -->
<div id="floatingMenu" class="floating-menu">
  <h3 class="floating-menu-title">üìö Study Tools</h3>
  
  <%= link_to study_materials_path, class: "menu-item" do %>
    <span class="menu-icon">üìù</span>
    <div class="menu-text">
      <strong>My Study Materials</strong>
      <small>PDF and image upload</small>
    </div>
  <% end %>
  
  <%= link_to flashcard_collections_path, class: "menu-item" do %>
    <span class="menu-icon">üé¥</span>
    <div class="menu-text">
      <strong>Flashcards</strong>
      <small>Card collections</small>
    </div>
  <% end %>
  
  <%= link_to agendas_path, class: "menu-item" do %>
    <span class="menu-icon">üìÖ</span>
    <div class="menu-text">
      <strong>My Agenda</strong>
      <small>Event calendar</small>
    </div>
  <% end %>
  
  <%= link_to reminders_path, class: "menu-item" do %>
    <span class="menu-icon">‚è∞</span>
    <div class="menu-text">
      <strong>Reminders</strong>
      <small>Alarms and notes</small>
    </div>
  <% end %>
</div>