<!-- Theme Switcher - Now in Navbar -->

<div class="library-container">
  <!-- Timers Panel (Top Left) -->
  <div class="timers-panel-left">
    <!-- Timers List -->
    <div class="timers-list">
      <% @timers.each do |timer| %>
          <div class="timer-box-dual" id="timer-<%= timer.id %>" data-timer-id="<%= timer.id %>">
            
            <!-- Timer Header -->
            <div class="timer-header">
              ‚è±Ô∏è Timer
            </div>
            
            <!-- Two Timers in One Table -->
            <div class="dual-timer-container">
              <div class="timer-row <%= timer.active_timer == 'study' ? 'active-timer' : '' %>" id="study-row-<%= timer.id %>">
                <div class="timer-label" id="study-label-<%= timer.id %>">üìö Study</div>
                <div class="timer-display" id="study-display-<%= timer.id %>"><%= timer.formatted_study_time %></div>
              </div>
              
              <div class="timer-row <%= timer.active_timer == 'break' ? 'active-timer' : '' %>" id="break-row-<%= timer.id %>">
                <div class="timer-label" id="break-label-<%= timer.id %>">‚òï Break</div>
                <div class="timer-display" id="break-display-<%= timer.id %>"><%= timer.formatted_break_time %></div>
              </div>
            </div>
            
            <div class="timer-controls-dual">
              <button class="timer-btn-primary" id="toggle-btn-<%= timer.id %>" onclick="toggleTimerAction(<%= timer.id %>)" data-running="<%= timer.is_running %>">
                <%= timer.is_running ? '<i class="fa-solid fa-pause"></i> Pause'.html_safe : '<i class="fa-solid fa-play"></i> Start'.html_safe %>
              </button>
              
              <button class="timer-btn-secondary" id="break-toggle-btn-<%= timer.id %>" onclick="toggleBreakAction(<%= timer.id %>)" data-active-timer="<%= timer.active_timer %>">
                <%= timer.active_timer == 'study' ? '<i class="fa-solid fa-mug-hot"></i> Break'.html_safe : '<i class="fa-solid fa-book"></i> Study'.html_safe %>
              </button>
              
              <button class="timer-btn-danger" onclick="resetTimerWithConfirm(<%= timer.id %>)">
                <i class="fa-solid fa-rotate-right"></i> Reset
              </button>
            </div>
          </div>
      <% end %>
    </div>
  </div>
  <!-- End Timers Panel -->

  <!-- Notes Area (Center) -->
  <div class="notes-center-area">
    <button class="btn-create-note" onclick="showAddForm()">
      <i class="fa-solid fa-plus"></i> Add Note
    </button>

    <!-- Add New Note Form -->
    <div id="addForm" class="add-form-center" style="display: none;">
      <%= form_with model: Note.new, url: notes_path, local: true, class: "note-form-center" do |f| %>
        <%= f.text_field :title, placeholder: "Title", class: "form-input", required: true %>
        <%= f.text_area :content, placeholder: "Content", class: "form-textarea", rows: 4, required: true %>
        <div class="form-actions">
          <%= f.submit "Save", class: "btn-save" %>
          <button type="button" class="btn-cancel" onclick="hideAddForm()">Cancel</button>
        </div>
      <% end %>
    </div>

    <!-- Notes Grid (Post-it style) -->
    <div class="notes-grid">
      <% @notes.each do |note| %>
        <div class="note-postit" id="note-<%= note.id %>">
          <div class="note-postit-content" onclick="showModal(<%= note.id %>)">
            <h3><%= truncate(note.title, length: 30) %></h3>
            <p><%= truncate(note.content, length: 80) %></p>
          </div>
          <div class="note-postit-actions">
            <a href="#" onclick="showEditModal(<%= note.id %>); return false;" class="btn-edit" title="Edit">‚úèÔ∏è</a>
            <a href="#" onclick="deleteNote(<%= note.id %>); return false;" class="btn-delete" title="Delete">üóëÔ∏è</a>
          </div>
        </div>
      <% end %>
    </div>
  </div>

  <!-- Tasks Panel (Right) -->
  <div class="tasks-panel-right">
    <div class="todo-header">
      <h2><i class="fa-solid fa-square-check"></i><span class="tasks-title">Tasks</span></h2>
      <button class="btn-add" onclick="showAddTaskForm()">+ Add New</button>
    </div>

    <!-- Add New Task Form -->
    <div id="addTaskForm" class="add-form" style="display: none;">
      <%= form_with model: Task.new, url: tasks_path, local: true, class: "todo-form" do |f| %>
        <%= f.text_field :title, placeholder: "Task title", class: "form-input", required: true %>
        <%= f.text_area :content, placeholder: "Task details (optional)", class: "form-textarea", rows: 2 %>
        <div class="form-actions">
          <%= f.submit "Save", class: "btn-save" %>
          <button type="button" class="btn-cancel" onclick="hideAddTaskForm()">Cancel</button>
        </div>
      <% end %>
    </div>

    <!-- Tasks List -->
    <div class="todo-list">
      <% if @tasks.empty? %>
        <p class="empty-message">No tasks yet. You can add a new task using the button above.</p>
      <% else %>
        <% @tasks.each do |task| %>
          <div class="todo-item task-item <%= 'completed' if task.completed %>" id="task-<%= task.id %>">
            <div class="task-checkbox-wrapper">
              <input type="checkbox" 
                     id="checkbox-<%= task.id %>" 
                     <%= 'checked' if task.completed %>
                     onchange="toggleTask(<%= task.id %>)"
                     class="task-checkbox">
              <label for="checkbox-<%= task.id %>" class="task-title <%= 'completed' if task.completed %>">
                <%= task.title %>
              </label>
            </div>
            <div class="todo-actions">
              <a href="#" onclick="showTaskModal(<%= task.id %>); return false;" class="btn-view" title="View"><i class="fa-solid fa-eye"></i></a>
              <a href="#" onclick="deleteTask(<%= task.id %>); return false;" class="btn-delete" title="Delete"><i class="fa-solid fa-xmark"></i></a>
            </div>
          </div>
        <% end %>
      <% end %>
    </div>
  </div>

  <!-- Modal Window -->
  <div id="todoModal" class="modal">
    <div class="modal-content">
      <span class="modal-close" onclick="closeModal()">&times;</span>
      <div id="modalBody">
        <!-- Modal content will be filled by JavaScript -->
      </div>
    </div>
  </div>
</div>

<script>
  // HTML escape function
  function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  // Show modal
  function showModal(noteId) {
    const modal = document.getElementById('todoModal');
    const modalBody = document.getElementById('modalBody');
    
    // Show loading
    modalBody.innerHTML = '<div style="text-align: center; padding: 40px;"><p>Loading...</p></div>';
    modal.style.display = 'block';
    
    // Fetch note details via AJAX
    fetch(`/notes/${noteId}.json`)
      .then(response => {
        if (!response.ok) {
          throw new Error('Note not found');
        }
        return response.json();
      })
      .then(data => {
        const title = escapeHtml(data.title);
        const content = escapeHtml(data.content).replace(/\n/g, '<br>');
        const createdAt = new Date(data.created_at).toLocaleString('en-US', {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        });
        
        modalBody.innerHTML = `
          <h2>${title}</h2>
          <div class="modal-content-text">
            <p>${content}</p>
          </div>
          <div class="modal-footer">
            <small>üìÖ Created: ${createdAt}</small>
          </div>
        `;
      })
      .catch(error => {
        console.error('Error:', error);
        modalBody.innerHTML = `
          <div style="text-align: center; padding: 20px;">
            <h3 style="color: #C85A54;">‚ùå Error</h3>
            <p>${escapeHtml(error.message)}</p>
          </div>
        `;
      });
  }

  // Close modal
  function closeModal() {
    document.getElementById('todoModal').style.display = 'none';
  }

  // Close modal when clicking outside
  window.onclick = function(event) {
    const modal = document.getElementById('todoModal');
    if (event.target == modal) {
      closeModal();
    }
  }

  // Show/hide form
  function showAddForm() {
    document.getElementById('addForm').style.display = 'block';
  }

  function hideAddForm() {
    document.getElementById('addForm').style.display = 'none';
  }

  // Close modal with ESC key
  document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
      closeModal();
      hideAddForm();
      hideAddTaskForm();
      closeFloatingMenu();
    }
  });

  // Show edit modal
  function showEditModal(noteId) {
    const modal = document.getElementById('todoModal');
    const modalBody = document.getElementById('modalBody');
    
    // Show loading
    modalBody.innerHTML = '<div style="text-align: center; padding: 40px;"><p>Loading...</p></div>';
    modal.style.display = 'block';
    
    // Fetch note details via AJAX
    fetch(`/notes/${noteId}.json`)
      .then(response => {
        if (!response.ok) {
          throw new Error('Note not found');
        }
        return response.json();
      })
      .then(data => {
        const title = escapeHtml(data.title);
        const content = escapeHtml(data.content);
        
        modalBody.innerHTML = `
          <h2>‚úèÔ∏è Edit Note</h2>
          <form id="editForm" onsubmit="updateNote(${noteId}); return false;">
            <div class="modal-form-group">
              <label for="edit-title">Title</label>
              <input type="text" id="edit-title" name="title" value="${title}" class="modal-form-control" required>
            </div>
            <div class="modal-form-group">
              <label for="edit-content">Content</label>
              <textarea id="edit-content" name="content" class="modal-form-control" rows="10" required>${content}</textarea>
            </div>
            <div class="modal-form-buttons">
              <button type="submit" class="btn btn-primary">üíæ Save</button>
              <button type="button" class="btn btn-secondary" onclick="closeModal()">Cancel</button>
            </div>
          </form>
        `;
      })
      .catch(error => {
        console.error('Error:', error);
        modalBody.innerHTML = `
          <div style="text-align: center; padding: 20px;">
            <h3 style="color: #C85A54;">‚ùå Error</h3>
            <p>${escapeHtml(error.message)}</p>
          </div>
        `;
      });
  }

  // Update note function
  function updateNote(noteId) {
    const title = document.getElementById('edit-title').value;
    const content = document.getElementById('edit-content').value;

    const csrfToken = document.querySelector('[name="csrf-token"]');
    if (!csrfToken) {
      alert('Security token not found. Please refresh the page and try again.');
      return;
    }

    fetch(`/notes/${noteId}`, {
      method: 'PATCH',
      headers: {
        'X-CSRF-Token': csrfToken.content,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      body: JSON.stringify({
        note: {
          title: title,
          content: content
        }
      })
    })
    .then(response => {
      if (response.ok) {
        return response.json();
      } else {
        throw new Error('Update failed');
      }
    })
    .then(data => {
      // Update in list
      const noteElement = document.getElementById(`note-${noteId}`);
      if (noteElement) {
        const titleElement = noteElement.querySelector('h3');
        if (titleElement) {
          titleElement.textContent = data.title;
        }
      }
      
      // Close modal
      closeModal();
      
      console.log('Note successfully updated');
    })
    .catch(error => {
      console.error('Error:', error);
      alert('An error occurred while updating the note. Please try again.');
    });
  }

  // Delete note function
  function deleteNote(noteId) {
    if (!confirm('Are you sure you want to delete this note?')) {
      return;
    }

    // Get CSRF token
    const csrfToken = document.querySelector('[name="csrf-token"]');
    if (!csrfToken) {
      console.error('CSRF token not found');
      alert('Security token not found. Please refresh the page and try again.');
      return;
    }

    console.log('Deleting note with ID:', noteId);

    fetch(`/notes/${noteId}`, {
      method: 'DELETE',
      headers: {
        'X-CSRF-Token': csrfToken.content,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      }
    })
    .then(response => {
      console.log('Response status:', response.status);
      if (response.ok || response.status === 204) {
        // Remove deleted note from grid
        const noteElement = document.getElementById(`note-${noteId}`);
        if (noteElement) {
          noteElement.style.transition = 'all 0.3s ease';
          noteElement.style.opacity = '0';
          noteElement.style.transform = 'scale(0.8) rotate(-5deg)';
          setTimeout(() => {
            noteElement.remove();
          }, 300);
        }
        
        console.log('Note successfully deleted');
      } else {
        throw new Error(`Delete operation failed with status: ${response.status}`);
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('An error occurred while deleting the note. Please try again.');
    });
  }

  // ============== TASK FUNCTIONS ==============
  
  // Show/hide task form
  function showAddTaskForm() {
    document.getElementById('addTaskForm').style.display = 'block';
  }

  function hideAddTaskForm() {
    document.getElementById('addTaskForm').style.display = 'none';
  }

  // Toggle task completion
  function toggleTask(taskId) {
    const csrfToken = document.querySelector('[name="csrf-token"]');
    if (!csrfToken) {
      alert('Security token not found. Please refresh the page and try again.');
      return;
    }

    fetch(`/tasks/${taskId}/toggle`, {
      method: 'PATCH',
      headers: {
        'X-CSRF-Token': csrfToken.content,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      }
    })
    .then(response => response.json())
    .then(data => {
      const taskElement = document.getElementById(`task-${taskId}`);
      const taskTitle = taskElement.querySelector('.task-title');
      
      if (data.completed) {
        taskElement.classList.add('completed');
        taskTitle.classList.add('completed');
      } else {
        taskElement.classList.remove('completed');
        taskTitle.classList.remove('completed');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('An error occurred while updating the task. Please try again.');
    });
  }

  // Show task modal
  function showTaskModal(taskId) {
    const modal = document.getElementById('todoModal');
    const modalBody = document.getElementById('modalBody');
    
    modalBody.innerHTML = '<div style="text-align: center; padding: 40px;"><p>Loading...</p></div>';
    modal.style.display = 'block';
    
    fetch(`/tasks/${taskId}.json`)
      .then(response => {
        if (!response.ok) throw new Error('Task not found');
        return response.json();
      })
      .then(data => {
        const title = escapeHtml(data.title);
        const content = data.content ? escapeHtml(data.content).replace(/\n/g, '<br>') : '<em>No details</em>';
        const status = data.completed ? '‚úÖ Completed' : '‚è≥ Pending';
        const createdAt = new Date(data.created_at).toLocaleString('en-US', {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        });
        
        modalBody.innerHTML = `
          <h2>${title}</h2>
          <div class="modal-content-text">
            <p><strong>Status:</strong> ${status}</p>
            <p>${content}</p>
          </div>
          <div class="modal-footer">
            <small>üìÖ Created: ${createdAt}</small>
          </div>
        `;
      })
      .catch(error => {
        console.error('Error:', error);
        modalBody.innerHTML = `
          <div style="text-align: center; padding: 20px;">
            <h3 style="color: #C85A54;">‚ùå Error</h3>
            <p>${escapeHtml(error.message)}</p>
          </div>
        `;
      });
  }

  // Show edit task modal
  function showEditTaskModal(taskId) {
    const modal = document.getElementById('todoModal');
    const modalBody = document.getElementById('modalBody');
    
    modalBody.innerHTML = '<div style="text-align: center; padding: 40px;"><p>Loading...</p></div>';
    modal.style.display = 'block';
    
    fetch(`/tasks/${taskId}.json`)
      .then(response => {
        if (!response.ok) throw new Error('Task not found');
        return response.json();
      })
      .then(data => {
        const title = escapeHtml(data.title);
        const content = data.content ? escapeHtml(data.content) : '';
        const completed = data.completed ? 'checked' : '';
        
        modalBody.innerHTML = `
          <h2>‚úèÔ∏è Edit Task</h2>
          <form id="editTaskForm" onsubmit="updateTask(${taskId}); return false;">
            <div class="modal-form-group">
              <label for="edit-task-title">Title</label>
              <input type="text" id="edit-task-title" name="title" value="${title}" class="modal-form-control" required>
            </div>
            <div class="modal-form-group">
              <label for="edit-task-content">Details</label>
              <textarea id="edit-task-content" name="content" class="modal-form-control" rows="5">${content}</textarea>
            </div>
            <div class="modal-form-group">
              <label style="display: flex; align-items: center; gap: 8px;">
                <input type="checkbox" id="edit-task-completed" name="completed" ${completed}>
                Mark as completed
              </label>
            </div>
            <div class="modal-form-buttons">
              <button type="submit" class="btn btn-primary">üíæ Save</button>
              <button type="button" class="btn btn-secondary" onclick="closeModal()">Cancel</button>
            </div>
          </form>
        `;
      })
      .catch(error => {
        console.error('Error:', error);
        modalBody.innerHTML = `
          <div style="text-align: center; padding: 20px;">
            <h3 style="color: #C85A54;">‚ùå Error</h3>
            <p>${escapeHtml(error.message)}</p>
          </div>
        `;
      });
  }

  // Update task
  function updateTask(taskId) {
    const title = document.getElementById('edit-task-title').value;
    const content = document.getElementById('edit-task-content').value;
    const completed = document.getElementById('edit-task-completed').checked;

    const csrfToken = document.querySelector('[name="csrf-token"]');
    if (!csrfToken) {
      alert('Security token not found. Please refresh the page and try again.');
      return;
    }

    fetch(`/tasks/${taskId}`, {
      method: 'PATCH',
      headers: {
        'X-CSRF-Token': csrfToken.content,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      body: JSON.stringify({
        task: {
          title: title,
          content: content,
          completed: completed
        }
      })
    })
    .then(response => {
      if (response.ok) return response.json();
      throw new Error('Update failed');
    })
    .then(data => {
      // Update in list
      const taskElement = document.getElementById(`task-${taskId}`);
      if (taskElement) {
        const titleElement = taskElement.querySelector('.task-title');
        const checkbox = taskElement.querySelector('.task-checkbox');
        
        if (titleElement) titleElement.textContent = data.title;
        if (checkbox) checkbox.checked = data.completed;
        
        if (data.completed) {
          taskElement.classList.add('completed');
          titleElement.classList.add('completed');
        } else {
          taskElement.classList.remove('completed');
          titleElement.classList.remove('completed');
        }
      }
      
      closeModal();
      console.log('Task successfully updated');
    })
    .catch(error => {
      console.error('Error:', error);
      alert('An error occurred while updating the task. Please try again.');
    });
  }

  // Delete task
  function deleteTask(taskId) {
    if (!confirm('Are you sure you want to delete this task?')) {
      return;
    }

    const csrfToken = document.querySelector('[name="csrf-token"]');
    if (!csrfToken) {
      console.error('CSRF token not found');
      alert('Security token not found. Please refresh the page and try again.');
      return;
    }

    fetch(`/tasks/${taskId}`, {
      method: 'DELETE',
      headers: {
        'X-CSRF-Token': csrfToken.content,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      }
    })
    .then(response => {
      if (response.ok || response.status === 204) {
        const taskElement = document.getElementById(`task-${taskId}`);
        if (taskElement) {
          taskElement.style.transition = 'all 0.3s ease';
          taskElement.style.opacity = '0';
          taskElement.style.transform = 'translateX(-50px)';
          setTimeout(() => {
            taskElement.remove();
            
            const tasksList = document.querySelector('.tasks-panel .todo-list');
            const remainingTasks = tasksList.querySelectorAll('.task-item');
            if (remainingTasks.length === 0) {
              tasksList.innerHTML = '<p class="empty-message">No tasks yet. You can add a new task using the button above.</p>';
            }
          }, 300);
        }
        
        console.log('Task successfully deleted');
      } else {
        throw new Error(`Delete operation failed with status: ${response.status}`);
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('An error occurred while deleting the task. Please try again.');
    });
  }

  // ============== TIMER FUNCTIONS ==============
  
  // Timer actions
  function toggleTimerAction(timerId) {
    const toggleBtn = document.getElementById(`toggle-btn-${timerId}`);
    const isRunning = toggleBtn.getAttribute('data-running') === 'true';
    
    if (isRunning) {
      pauseTimerAction(timerId);
    } else {
      startTimerAction(timerId);
    }
  }

  function startTimerAction(timerId) {
    fetch(`/timers/${timerId}/start`, {
      method: 'PATCH',
      headers: {
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      }
    })
    .then(response => response.json())
    .then(data => {
      console.log('Timer started:', data);
      startClientTimer(timerId);
      updateToggleButton(timerId, true);
    })
    .catch(error => console.error('Error:', error));
  }

  function pauseTimerAction(timerId) {
    fetch(`/timers/${timerId}/pause`, {
      method: 'PATCH',
      headers: {
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      }
    })
    .then(response => response.json())
    .then(data => {
      console.log('Timer paused:', data);
      stopClientTimer(timerId);
      updateToggleButton(timerId, false);
    })
    .catch(error => console.error('Error:', error));
  }

  function updateToggleButton(timerId, isRunning) {
    const toggleBtn = document.getElementById(`toggle-btn-${timerId}`);
    if (toggleBtn) {
      toggleBtn.setAttribute('data-running', isRunning);
      if (isRunning) {
        toggleBtn.innerHTML = '<i class="fa-solid fa-pause"></i> Pause';
      } else {
        toggleBtn.innerHTML = '<i class="fa-solid fa-play"></i> Start';
      }
    }
  }

  function resetTimerWithConfirm(timerId) {
    if (!confirm('Are you sure? Both timers will be reset!')) {
      return;
    }
    resetTimerAction(timerId);
  }

  function resetTimerAction(timerId) {
    fetch(`/timers/${timerId}/reset`, {
      method: 'PATCH',
      headers: {
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      }
    })
    .then(response => response.json())
    .then(data => {
      console.log('Timer reset:', data);
      stopClientTimer(timerId);
      updateDualTimerDisplay(timerId, data.seconds, data.break_seconds, data.active_timer);
      updateToggleButton(timerId, false);
      updateBreakToggleButton(timerId, data.active_timer);
    })
    .catch(error => console.error('Error:', error));
  }
  
  function toggleBreakAction(timerId) {
    fetch(`/timers/${timerId}/toggle_break`, {
      method: 'PATCH',
      headers: {
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      }
    })
    .then(response => response.json())
    .then(data => {
      console.log('Break toggled:', data);
      updateDualTimerDisplay(timerId, data.seconds, data.break_seconds, data.active_timer);
      updateToggleButton(timerId, data.is_running);
      updateBreakToggleButton(timerId, data.active_timer);
      
      if (!clientTimers[timerId]) {
        startClientTimer(timerId);
      }
    })
    .catch(error => console.error('Error:', error));
  }
  
  function updateBreakToggleButton(timerId, activeTimer) {
    const breakToggleBtn = document.getElementById(`break-toggle-btn-${timerId}`);
    if (breakToggleBtn) {
      breakToggleBtn.setAttribute('data-active-timer', activeTimer);
      if (activeTimer === 'study') {
        breakToggleBtn.innerHTML = '<i class="fa-solid fa-mug-hot"></i> Break';
      } else {
        breakToggleBtn.innerHTML = '<i class="fa-solid fa-book"></i> Study';
      }
    }
  }

  // Client-side timer management
  const clientTimers = {};

  function startClientTimer(timerId) {
    if (clientTimers[timerId]) return;
    
    clientTimers[timerId] = setInterval(() => {
      fetch(`/timers/${timerId}/tick`, {
        method: 'PATCH',
        headers: {
          'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        }
      })
      .then(response => response.json())
      .then(data => {
        updateDualTimerDisplay(timerId, data.seconds, data.break_seconds, data.active_timer);
      })
      .catch(error => console.error('Error:', error));
    }, 1000);
  }

  function stopClientTimer(timerId) {
    if (clientTimers[timerId]) {
      clearInterval(clientTimers[timerId]);
      delete clientTimers[timerId];
    }
  }

  function updateDualTimerDisplay(timerId, studySeconds, breakSeconds, activeTimer) {
    const studyDisplay = document.getElementById(`study-display-${timerId}`);
    if (studyDisplay) {
      studyDisplay.textContent = formatTime(studySeconds);
    }
    
    const breakDisplay = document.getElementById(`break-display-${timerId}`);
    if (breakDisplay) {
      breakDisplay.textContent = formatTime(breakSeconds);
    }
    
    const studyRow = document.getElementById(`study-row-${timerId}`);
    const breakRow = document.getElementById(`break-row-${timerId}`);
    
    if (studyRow && breakRow) {
      if (activeTimer === 'study') {
        studyRow.classList.add('active-timer');
        breakRow.classList.remove('active-timer');
      } else {
        studyRow.classList.remove('active-timer');
        breakRow.classList.add('active-timer');
      }
    }
  }

  function formatTime(seconds) {
    const hrs = Math.floor(seconds / 3600);
    const mins = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    return `${String(hrs).padStart(2, '0')}:${String(mins).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
  }

  // Auto-start timers that are running when page loads
  document.addEventListener('DOMContentLoaded', function() {
    <% @timers.select(&:is_running).each do |timer| %>
      startClientTimer(<%= timer.id %>);
    <% end %>
  });

  // Theme functionality is now in navbar (application.html.erb)

  // Floating menu kontrol√º
  function toggleFloatingMenu() {
    const menu = document.getElementById('floatingMenu');
    const isVisible = menu.style.display === 'block';
    
    if (isVisible) {
      closeFloatingMenu();
    } else {
      openFloatingMenu();
    }
  }

  function openFloatingMenu() {
    const menu = document.getElementById('floatingMenu');
    const items = menu.querySelectorAll('.menu-item');
    
    menu.style.display = 'block';
    
    // Trigger reflow to restart animation
    void menu.offsetWidth;
    
    setTimeout(() => {
      menu.classList.add('show');
      items.forEach(item => {
        item.classList.add('animate');
      });
    }, 10);
  }

  function closeFloatingMenu() {
    const menu = document.getElementById('floatingMenu');
    const items = menu.querySelectorAll('.menu-item');
    
    menu.classList.remove('show');
    items.forEach(item => {
      item.classList.remove('animate');
    });
    
    setTimeout(() => {
      menu.style.display = 'none';
    }, 300);
  }

  // Close menu when clicking outside
  document.addEventListener('click', function(event) {
    const menu = document.getElementById('floatingMenu');
    const button = document.getElementById('floatingButton');
    
    if (!menu.contains(event.target) && !button.contains(event.target)) {
      closeFloatingMenu();
    }
  });

  // Hover functionality for floating button
  document.addEventListener('DOMContentLoaded', function() {
    const button = document.getElementById('floatingButton');
    const menu = document.getElementById('floatingMenu');
    
    if (button && menu) {
      // Show menu on button hover
      button.addEventListener('mouseenter', function() {
        openFloatingMenu();
      });
      
      // Keep menu open when hovering over menu
      menu.addEventListener('mouseenter', function() {
        openFloatingMenu();
      });
      
      // Close menu when leaving button (if not entering menu)
      button.addEventListener('mouseleave', function() {
        setTimeout(function() {
          if (!menu.matches(':hover') && !button.matches(':hover')) {
            closeFloatingMenu();
          }
        }, 100);
      });
      
      // Close menu when leaving menu (if not entering button)
      menu.addEventListener('mouseleave', function() {
        setTimeout(function() {
          if (!menu.matches(':hover') && !button.matches(':hover')) {
            closeFloatingMenu();
          }
        }, 100);
      });
    }
  });
</script>

<!-- Floating Menu Button -->
<div id="floatingButton" onclick="toggleFloatingMenu()" class="floating-button">
  <span style="color: white; font-size: 1.5em; font-weight: bold;"><i class="fa-solid fa-bookmark"></i></span>
</div>

<!-- Floating Menu -->
<div id="floatingMenu" class="floating-menu">
  <h3 class="floating-menu-title">Study Tools</h3>
  
  <%= link_to study_materials_path, class: "menu-item" do %>
    <span class="menu-icon"><i class="fa-solid fa-pen-to-square"></i></span>
    <div class="menu-text">
      <strong>My Study Materials</strong>
      <small>PDF and image upload</small>
    </div>
  <% end %>
  
  <%= link_to flashcard_collections_path, class: "menu-item" do %>
    <span class="menu-icon"><i class="fa-solid fa-repeat"></i></i></span>
    <div class="menu-text">
      <strong>Flashcards</strong>
      <small>Card collections</small>
    </div>
  <% end %>
  
  <%= link_to agendas_path, class: "menu-item" do %>
    <span class="menu-icon"><i class="fa-solid fa-calendar-days"></i></span>
    <div class="menu-text">
      <strong>My Agenda</strong>
      <small>Event calendar</small>
    </div>
  <% end %>
  
  <%= link_to reminders_path, class: "menu-item" do %>
    <span class="menu-icon"><i class="fa-solid fa-stopwatch"></i></span>
    <div class="menu-text">
      <strong>Reminders</strong>
      <small>Alarms and notes</small>
    </div>
  <% end %>
</div>