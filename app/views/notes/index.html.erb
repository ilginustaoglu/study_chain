<div class="library-container">
  <!-- Timers Panel (Top Left) -->
  <div class="timers-panel">
    <div class="timer-box">
      <div class="timer-header">‚è±Ô∏è Study </div>
      <div class="timer-display" id="timer1-display">00:00:00</div>
      <div class="timer-controls">
        <button class="timer-btn" onclick="startTimer(1)">‚ñ∂Ô∏è</button>
        <button class="timer-btn" onclick="pauseTimer(1)">‚è∏Ô∏è</button>
        <button class="timer-btn" onclick="resetTimer(1)">‚Ü™Ô∏è</button>
      </div>
      <div class="timer-alarm">
        <input type="time" id="timer1-alarm" class="alarm-input" placeholder="Set Alarm">
        <button class="alarm-btn" onclick="setAlarm(1)">üîî</button>
      </div>
    </div>
    
    <div class="timer-box">
      <div class="timer-header">‚è±Ô∏è Break </div>
      <div class="timer-display" id="timer2-display">00:00:00</div>
      <div class="timer-controls">
        <button class="timer-btn" onclick="startTimer(2)">‚ñ∂Ô∏è</button>
        <button class="timer-btn" onclick="pauseTimer(2)">‚è∏Ô∏è</button>
        <button class="timer-btn" onclick="resetTimer(2)">‚Ü™Ô∏è</button>
      </div>
      <div class="timer-alarm">
        <input type="time" id="timer2-alarm" class="alarm-input" placeholder="Set Alarm">
        <button class="alarm-btn" onclick="setAlarm(2)">üîî</button>
      </div>
    </div>
  </div>

  <!-- Notes Panel (Top Right) -->
  <div class="todo-panel">
    <div class="todo-header">
      <h2>üìù Study Notes</h2>
      <button class="btn-add" onclick="showAddForm()">+ Add New</button>
    </div>

    <!-- New Note Form -->
    <div id="addForm" class="add-form" style="display: none;">
      <%= form_with model: Note.new, local: true, class: "todo-form" do |f| %>
        <%= f.text_field :title, placeholder: "Title", class: "form-input", required: true %>
        <%= f.text_area :content, placeholder: "Content (details)", class: "form-textarea", rows: 3, required: true %>
        <div class="form-actions">
          <%= f.submit "Save", class: "btn-save" %>
          <button type="button" class="btn-cancel" onclick="hideAddForm()">Cancel</button>
        </div>
      <% end %>
    </div>

    <!-- Notes List -->
    <div class="todo-list">
      <% if @notes.empty? %>
        <p class="empty-message">No notes yet. Click the button above to add a new note.</p>
      <% else %>
        <% @notes.each do |note| %>
          <div class="todo-item" id="note-<%= note.id %>">
            <div class="todo-item-header" onclick="showModal(<%= note.id %>)">
              <h3><%= note.title %></h3>
              <span class="click-hint">Click for details</span>
            </div>
            <div class="todo-actions">
              <a href="#" onclick="showEditModal(<%= note.id %>); return false;" class="btn-edit" title="Edit">‚úèÔ∏è</a>
              <a href="#" onclick="deleteNote(<%= note.id %>); return false;" class="btn-delete" title="Delete">üóëÔ∏è</a>
            </div>
          </div>
        <% end %>
      <% end %>
    </div>
  </div>

  <!-- Modal Window -->
  <div id="todoModal" class="modal">
    <div class="modal-content">
      <span class="modal-close" onclick="closeModal()">&times;</span>
      <div id="modalBody">
        <!-- Modal content will be filled by JavaScript -->
      </div>
    </div>
  </div>
</div>

<script>
  // HTML escape function
  function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  // Show modal
  function showModal(noteId) {
    const modal = document.getElementById('todoModal');
    const modalBody = document.getElementById('modalBody');
    
    // Show loading
    modalBody.innerHTML = '<div style="text-align: center; padding: 40px;"><p>Loading...</p></div>';
    modal.style.display = 'block';
    
    // Fetch note details via AJAX
    fetch(`/notes/${noteId}.json`)
      .then(response => {
        if (!response.ok) {
          throw new Error('Note not found');
        }
        return response.json();
      })
      .then(data => {
        const title = escapeHtml(data.title);
        const content = escapeHtml(data.content).replace(/\n/g, '<br>');
        const createdAt = new Date(data.created_at).toLocaleString('en-US', {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        });
        
        modalBody.innerHTML = `
          <h2>${title}</h2>
          <div class="modal-content-text">
            <p>${content}</p>
          </div>
          <div class="modal-footer">
            <small>üìÖ Created: ${createdAt}</small>
          </div>
        `;
      })
      .catch(error => {
        console.error('Error:', error);
        modalBody.innerHTML = `
          <div style="text-align: center; padding: 20px;">
            <h3 style="color: #C85A54;">‚ùå Error</h3>
            <p>${escapeHtml(error.message)}</p>
          </div>
        `;
      });
  }

  // Close modal
  function closeModal() {
    const modal = document.getElementById('todoModal');
    modal.style.display = 'none';
  }

  // Close modal when clicking outside
  window.onclick = function(event) {
    const modal = document.getElementById('todoModal');
    if (event.target === modal) {
      closeModal();
    }
  }

  // Show/hide form
  function showAddForm() {
    document.getElementById('addForm').style.display = 'block';
  }

  function hideAddForm() {
    document.getElementById('addForm').style.display = 'none';
  }

  // Close modal with ESC key
  document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
      closeModal();
      hideAddForm();
    }
  });

  // Show edit modal
  function showEditModal(noteId) {
    const modal = document.getElementById('todoModal');
    const modalBody = document.getElementById('modalBody');
    
    // Show loading
    modalBody.innerHTML = '<div style="text-align: center; padding: 40px;"><p>Loading...</p></div>';
    modal.style.display = 'block';
    
    // Fetch note details via AJAX
    fetch(`/notes/${noteId}.json`)
      .then(response => {
        if (!response.ok) {
          throw new Error('Note not found');
        }
        return response.json();
      })
      .then(data => {
        const title = escapeHtml(data.title);
        const content = escapeHtml(data.content);
        
        modalBody.innerHTML = `
          <h2>‚úèÔ∏è Edit Note</h2>
          <form id="editForm" onsubmit="updateNote(${noteId}); return false;">
            <div class="modal-form-group">
              <label for="edit-title">Title</label>
              <input type="text" id="edit-title" name="title" value="${title}" class="modal-form-control" required>
            </div>
            <div class="modal-form-group">
              <label for="edit-content">Content</label>
              <textarea id="edit-content" name="content" class="modal-form-control" rows="10" required>${content}</textarea>
            </div>
            <div class="modal-form-buttons">
              <button type="submit" class="btn btn-primary">üíæ Save</button>
              <button type="button" class="btn btn-secondary" onclick="closeModal()">Cancel</button>
            </div>
          </form>
        `;
      })
      .catch(error => {
        console.error('Error:', error);
        modalBody.innerHTML = `
          <div style="text-align: center; padding: 20px;">
            <h3 style="color: #C85A54;">‚ùå Error</h3>
            <p>${escapeHtml(error.message)}</p>
          </div>
        `;
      });
  }

  // Update note function
  function updateNote(noteId) {
    const title = document.getElementById('edit-title').value;
    const content = document.getElementById('edit-content').value;

    fetch(`/notes/${noteId}`, {
      method: 'PATCH',
      headers: {
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      body: JSON.stringify({
        note: {
          title: title,
          content: content
        }
      })
    })
    .then(response => {
      if (response.ok) {
        return response.json();
      } else {
        throw new Error('Update failed');
      }
    })
    .then(data => {
      // Update in list
      const noteElement = document.getElementById(`note-${noteId}`);
      if (noteElement) {
        const titleElement = noteElement.querySelector('h3');
        if (titleElement) {
          titleElement.textContent = data.title;
        }
      }
      
      // Close modal
      closeModal();
      
      console.log('Note successfully updated');
    })
    .catch(error => {
      console.error('Error:', error);
      alert('An error occurred while updating the note. Please try again.');
    });
  }

  // Delete note function
  function deleteNote(noteId) {
    if (!confirm('Are you sure you want to delete this note?')) {
      return;
    }

    fetch(`/notes/${noteId}`, {
      method: 'DELETE',
      headers: {
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
        'Accept': 'application/json'
      }
    })
    .then(response => {
      if (response.ok) {
        // Remove deleted note from list
        const noteElement = document.getElementById(`note-${noteId}`);
        if (noteElement) {
          noteElement.style.transition = 'all 0.3s ease';
          noteElement.style.opacity = '0';
          noteElement.style.transform = 'translateX(50px)';
          setTimeout(() => {
            noteElement.remove();
            
            // Show empty message if list is empty
            const todoList = document.querySelector('.todo-list');
            const remainingNotes = todoList.querySelectorAll('.todo-item');
            if (remainingNotes.length === 0) {
              todoList.innerHTML = '<p class="empty-message">No notes yet. Click the button above to add a new note.</p>';
            }
          }, 300);
        }
        
        // Success notification
        console.log('Note successfully deleted');
      } else {
        throw new Error('Delete operation failed');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('An error occurred while deleting the note. Please try again.');
    });
  }

  // Timer functionality
  const timers = {
    1: { seconds: 0, interval: null, alarm: null, running: false },
    2: { seconds: 0, interval: null, alarm: null, running: false }
  };

  function formatTime(seconds) {
    const hrs = Math.floor(seconds / 3600);
    const mins = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    return `${String(hrs).padStart(2, '0')}:${String(mins).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
  }

  function updateDisplay(timerNum) {
    document.getElementById(`timer${timerNum}-display`).textContent = formatTime(timers[timerNum].seconds);
  }

  function startTimer(timerNum) {
    if (timers[timerNum].running) return;
    
    timers[timerNum].running = true;
    timers[timerNum].interval = setInterval(() => {
      timers[timerNum].seconds++;
      updateDisplay(timerNum);
      checkAlarm(timerNum);
    }, 1000);
  }

  function pauseTimer(timerNum) {
    timers[timerNum].running = false;
    if (timers[timerNum].interval) {
      clearInterval(timers[timerNum].interval);
      timers[timerNum].interval = null;
    }
  }

  function resetTimer(timerNum) {
    pauseTimer(timerNum);
    timers[timerNum].seconds = 0;
    updateDisplay(timerNum);
  }

  function setAlarm(timerNum) {
    const alarmInput = document.getElementById(`timer${timerNum}-alarm`);
    const alarmTime = alarmInput.value;
    
    if (!alarmTime) {
      alert('Please set an alarm time');
      return;
    }

    const [hours, minutes] = alarmTime.split(':').map(Number);
    const alarmSeconds = (hours * 3600) + (minutes * 60);
    timers[timerNum].alarm = alarmSeconds;
    
    alert(`Alarm set for Timer ${timerNum} at ${alarmTime}`);
  }

  function checkAlarm(timerNum) {
    if (timers[timerNum].alarm && timers[timerNum].seconds === timers[timerNum].alarm) {
      pauseTimer(timerNum);
      
      // Play alarm sound (browser notification)
      if ('Notification' in window && Notification.permission === 'granted') {
        new Notification(`Timer ${timerNum} Alarm!`, {
          body: 'Your alarm time has been reached!',
          icon: '‚è∞'
        });
      }
      
      // Alert
      alert(`‚è∞ Timer ${timerNum} Alarm!\nTime's up!`);
      
      // Reset alarm
      timers[timerNum].alarm = null;
    }
  }

  // Request notification permission on load
  if ('Notification' in window && Notification.permission === 'default') {
    Notification.requestPermission();
  }

  // Floating menu control
  function toggleFloatingMenu() {
    const menu = document.getElementById('floatingMenu');
    const isVisible = menu.style.display === 'block';
    menu.style.display = isVisible ? 'none' : 'block';
  }

  function closeFloatingMenuNotes() {
    const menu = document.getElementById('floatingMenu');
    if (menu) {
      menu.style.display = 'none';
    }
  }

  // Close menu when clicking outside
  document.addEventListener('click', function(event) {
    const menu = document.getElementById('floatingMenu');
    const button = document.getElementById('floatingButton');
    
    if (menu && button && !menu.contains(event.target) && !button.contains(event.target)) {
      closeFloatingMenuNotes();
    }
  });

  // Close menu with ESC key
  document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
      closeModal();
      hideAddForm();
      closeFloatingMenuNotes();
    }
  });
</script>

<!-- Floating Menu Button -->
<div id="floatingButton" onclick="toggleFloatingMenu()" style="position: fixed; bottom: 30px; right: 30px; width: 65px; height: 65px; background: linear-gradient(135deg, #6F4E37 0%, #4A7C59 100%); border-radius: 50%; display: flex; align-items: center; justify-content: center; cursor: pointer; box-shadow: 0 4px 20px rgba(0,0,0,0.3); z-index: 1000; transition: transform 0.3s;" onmouseover="this.style.transform='scale(1.1)'" onmouseout="this.style.transform='scale(1)'">
  <span style="color: white; font-size: 2em; font-weight: bold;">‚ãÆ</span>
</div>

<!-- Floating Menu -->
<div id="floatingMenu" style="position: fixed; bottom: 110px; right: 30px; background: white; border-radius: 15px; box-shadow: 0 4px 30px rgba(0,0,0,0.2); padding: 15px; z-index: 999; display: none; min-width: 250px;">
  <h3 style="color: #6F4E37; margin: 0 0 15px 0; padding-bottom: 10px; border-bottom: 2px solid #8B6F47; font-size: 1.1em;">üìö Study Tools</h3>
  
  <%= link_to homes_path, class: "menu-item", style: "display: flex; align-items: center; gap: 12px; padding: 12px; text-decoration: none; color: #6F4E37; border-radius: 8px; margin-bottom: 8px; transition: background 0.2s;" do %>
    <span style="font-size: 1.5em;">üè†</span>
    <div>
      <strong style="display: block; font-size: 1em;">Home</strong>
      <small style="color: #6F4E37;">Timers & Notes</small>
    </div>
  <% end %>
  
  <%= link_to study_materials_path, class: "menu-item", style: "display: flex; align-items: center; gap: 12px; padding: 12px; text-decoration: none; color: #6F4E37; border-radius: 8px; margin-bottom: 8px; transition: background 0.2s;" do %>
    <span style="font-size: 1.5em;">üìù</span>
    <div>
      <strong style="display: block; font-size: 1em;">My Study Materials</strong>
      <small style="color: #6F4E37;">PDF and image upload</small>
    </div>
  <% end %>
  
  <%= link_to flashcard_collections_path, class: "menu-item", style: "display: flex; align-items: center; gap: 12px; padding: 12px; text-decoration: none; color: #6F4E37; border-radius: 8px; margin-bottom: 8px; transition: background 0.2s;" do %>
    <span style="font-size: 1.5em;">üé¥</span>
    <div>
      <strong style="display: block; font-size: 1em;">Flashcards</strong>
      <small style="color: #6F4E37;">Card collections</small>
    </div>
  <% end %>
  
  <%= link_to agendas_path, class: "menu-item", style: "display: flex; align-items: center; gap: 12px; padding: 12px; text-decoration: none; color: #6F4E37; border-radius: 8px; margin-bottom: 8px; transition: background 0.2s;" do %>
    <span style="font-size: 1.5em;">üìÖ</span>
    <div>
      <strong style="display: block; font-size: 1em;">My Agenda</strong>
      <small style="color: #6F4E37;">Event calendar</small>
    </div>
  <% end %>
  
  <%= link_to reminders_path, class: "menu-item", style: "display: flex; align-items: center; gap: 12px; padding: 12px; text-decoration: none; color: #6F4E37; border-radius: 8px; transition: background 0.2s;" do %>
    <span style="font-size: 1.5em;">‚è∞</span>
    <div>
      <strong style="display: block; font-size: 1em;">Reminders</strong>
      <small style="color: #6F4E37;">Alarms and notes</small>
    </div>
  <% end %>
</div>

<style>
  .menu-item:hover {
    background: #f5ebe0 !important;
  }
</style>
