<div class="library-container">
  <!-- Timers Panel -->
  <div class="timers-panel-full">
    <div class="todo-header">
      <h2>‚è±Ô∏è Timers</h2>
      <button class="btn-add" onclick="showAddTimerForm()">+ Add New Timer</button>
    </div>

    <!-- New Timer Form -->
    <div id="addTimerForm" class="add-form" style="display: none;">
      <%= form_with model: Timer.new, local: true, class: "todo-form" do |f| %>
        <%= f.text_field :name, placeholder: "Timer Name (e.g., Study, Break)", class: "form-input", required: true %>
        <%= f.time_field :alarm_time, class: "form-input", placeholder: "Set Alarm (optional)" %>
        <div class="form-actions">
          <%= f.submit "Create Timer", class: "btn-save" %>
          <button type="button" class="btn-cancel" onclick="hideAddTimerForm()">Cancel</button>
        </div>
      <% end %>
    </div>

    <!-- Timers List -->
    <div class="timers-grid">
      <% if @timers.empty? %>
        <p class="empty-message">No timers yet. Click the button above to add a new timer.</p>
      <% else %>
        <% @timers.each do |timer| %>
          <div class="timer-box" id="timer-<%= timer.id %>" data-timer-id="<%= timer.id %>">
            <div class="timer-header">
              ‚è±Ô∏è <%= timer.name %>
              <div class="timer-menu">
                <a href="#" onclick="showEditTimerModal(<%= timer.id %>); return false;" class="btn-edit-mini" title="Edit">‚úèÔ∏è</a>
                <a href="#" onclick="deleteTimer(<%= timer.id %>); return false;" class="btn-delete-mini" title="Delete">üóëÔ∏è</a>
              </div>
            </div>
            <div class="timer-display" id="timer-display-<%= timer.id %>"><%= timer.formatted_time %></div>
            <div class="timer-controls">
              <button class="timer-btn" id="toggle-btn-<%= timer.id %>" onclick="toggleTimerAction(<%= timer.id %>)" data-running="<%= timer.is_running %>">
                <%= timer.is_running ? '<i class="fa-solid fa-pause"></i>'.html_safe : '<i class="fa-solid fa-play"></i>'.html_safe %>
              </button>
              <button class="timer-btn" onclick="resetTimerAction(<%= timer.id %>)"><i class="fa-solid fa-reply"></i></button>
            </div>
            <% if timer.alarm_seconds %>
              <div class="timer-alarm-info">
              <i class="fa-solid fa-bell"></i> Alarm: <%= timer.alarm_time %>
              </div>
            <% end %>
          </div>
        <% end %>
      <% end %>
    </div>
  </div>

  <!-- Modal Window for Edit -->
  <div id="timerModal" class="modal">
    <div class="modal-content">
      <span class="modal-close" onclick="closeTimerModal()">&times;</span>
      <div id="timerModalBody">
        <!-- Modal content will be filled by JavaScript -->
      </div>
    </div>
  </div>
</div>

<script>
  // HTML escape function
  function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  // Show/hide add timer form
  function showAddTimerForm() {
    document.getElementById('addTimerForm').style.display = 'block';
  }

  function hideAddTimerForm() {
    document.getElementById('addTimerForm').style.display = 'none';
  }

  // Timer actions
  function toggleTimerAction(timerId) {
    const toggleBtn = document.getElementById(`toggle-btn-${timerId}`);
    const isRunning = toggleBtn.getAttribute('data-running') === 'true';
    
    if (isRunning) {
      pauseTimerAction(timerId);
    } else {
      startTimerAction(timerId);
    }
  }

  function startTimerAction(timerId) {
    fetch(`/timers/${timerId}/start`, {
      method: 'PATCH',
      headers: {
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      }
    })
    .then(response => response.json())
    .then(data => {
      console.log('Timer started:', data);
      startClientTimer(timerId);
      updateToggleButton(timerId, true);
    })
    .catch(error => console.error('Error:', error));
  }

  function pauseTimerAction(timerId) {
    fetch(`/timers/${timerId}/pause`, {
      method: 'PATCH',
      headers: {
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      }
    })
    .then(response => response.json())
    .then(data => {
      console.log('Timer paused:', data);
      stopClientTimer(timerId);
      updateToggleButton(timerId, false);
    })
    .catch(error => console.error('Error:', error));
  }

  function updateToggleButton(timerId, isRunning) {
    const toggleBtn = document.getElementById(`toggle-btn-${timerId}`);
    if (toggleBtn) {
      toggleBtn.setAttribute('data-running', isRunning);
      toggleBtn.innerHTML = isRunning ? '<i class="fa-solid fa-pause"></i>' : '<i class="fa-solid fa-play"></i>';
    }
  }

  function resetTimerAction(timerId) {
    fetch(`/timers/${timerId}/reset`, {
      method: 'PATCH',
      headers: {
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      }
    })
    .then(response => response.json())
    .then(data => {
      console.log('Timer reset:', data);
      stopClientTimer(timerId);
      updateTimerDisplay(timerId, data.seconds);
      updateToggleButton(timerId, false);
    })
    .catch(error => console.error('Error:', error));
  }

  // Client-side timer management
  const clientTimers = {};

  function startClientTimer(timerId) {
    if (clientTimers[timerId]) return; // Already running
    
    clientTimers[timerId] = setInterval(() => {
      fetch(`/timers/${timerId}/tick`, {
        method: 'PATCH',
        headers: {
          'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        }
      })
      .then(response => response.json())
      .then(data => {
        updateTimerDisplay(timerId, data.seconds);
        checkAlarm(timerId, data.seconds, data.alarm_seconds);
      })
      .catch(error => console.error('Error:', error));
    }, 1000);
  }

  function stopClientTimer(timerId) {
    if (clientTimers[timerId]) {
      clearInterval(clientTimers[timerId]);
      delete clientTimers[timerId];
    }
  }

  function updateTimerDisplay(timerId, seconds) {
    const display = document.getElementById(`timer-display-${timerId}`);
    if (display) {
      display.textContent = formatTime(seconds);
    }
  }

  function formatTime(seconds) {
    const hrs = Math.floor(seconds / 3600);
    const mins = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    return `${String(hrs).padStart(2, '0')}:${String(mins).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
  }

  function checkAlarm(timerId, currentSeconds, alarmSeconds) {
    if (alarmSeconds && currentSeconds === alarmSeconds) {
      stopClientTimer(timerId);
      updateToggleButton(timerId, false);
      
      // Update server state
      fetch(`/timers/${timerId}/pause`, {
        method: 'PATCH',
        headers: {
          'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        }
      });
      
      // Browser notification
      if ('Notification' in window && Notification.permission === 'granted') {
        new Notification('‚è∞ Timer Alarm!', {
          body: 'Your timer has reached the alarm time!',
          icon: '‚è∞'
        });
      }
      
      alert('‚è∞ Timer Alarm!\nTime\'s up!');
    }
  }

  // Delete timer
  function deleteTimer(timerId) {
    if (!confirm('Are you sure you want to delete this timer?')) {
      return;
    }

    fetch(`/timers/${timerId}`, {
      method: 'DELETE',
      headers: {
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
        'Accept': 'application/json'
      }
    })
    .then(response => {
      if (response.ok) {
        stopClientTimer(timerId);
        const timerElement = document.getElementById(`timer-${timerId}`);
        if (timerElement) {
          timerElement.style.transition = 'all 0.3s ease';
          timerElement.style.opacity = '0';
          timerElement.style.transform = 'scale(0.8)';
          setTimeout(() => {
            timerElement.remove();
            
            const timersGrid = document.querySelector('.timers-grid');
            const remainingTimers = timersGrid.querySelectorAll('.timer-box');
            if (remainingTimers.length === 0) {
              timersGrid.innerHTML = '<p class="empty-message">No timers yet. Click the button above to add a new timer.</p>';
            }
          }, 300);
        }
        console.log('Timer successfully deleted');
      } else {
        throw new Error('Delete operation failed');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('An error occurred while deleting the timer. Please try again.');
    });
  }

  // Show edit modal
  function showEditTimerModal(timerId) {
    const modal = document.getElementById('timerModal');
    const modalBody = document.getElementById('timerModalBody');
    
    modalBody.innerHTML = '<div style="text-align: center; padding: 40px;"><p>Loading...</p></div>';
    modal.style.display = 'block';
    
    fetch(`/timers/${timerId}.json`)
      .then(response => {
        if (!response.ok) throw new Error('Timer not found');
        return response.json();
      })
      .then(data => {
        const name = escapeHtml(data.name);
        const alarmTime = data.alarm_seconds ? formatAlarmTime(data.alarm_seconds) : '';
        
        modalBody.innerHTML = `
          <h2>‚úèÔ∏è Edit Timer</h2>
          <form id="editTimerForm" onsubmit="updateTimer(${timerId}); return false;">
            <div class="modal-form-group">
              <label for="edit-timer-name">Timer Name</label>
              <input type="text" id="edit-timer-name" name="name" value="${name}" class="modal-form-control" required>
            </div>
            <div class="modal-form-group">
              <label for="edit-timer-alarm">Alarm Time (HH:MM)</label>
              <input type="time" id="edit-timer-alarm" name="alarm_time" value="${alarmTime}" class="modal-form-control">
            </div>
            <div class="modal-form-buttons">
              <button type="submit" class="btn btn-primary">üíæ Save</button>
              <button type="button" class="btn btn-secondary" onclick="closeTimerModal()">Cancel</button>
            </div>
          </form>
        `;
      })
      .catch(error => {
        console.error('Error:', error);
        modalBody.innerHTML = `
          <div style="text-align: center; padding: 20px;">
            <h3 style="color: #C85A54;">‚ùå Error</h3>
            <p>${escapeHtml(error.message)}</p>
          </div>
        `;
      });
  }

  function formatAlarmTime(seconds) {
    if (!seconds) return '';
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}`;
  }

  // Update timer
  function updateTimer(timerId) {
    const name = document.getElementById('edit-timer-name').value;
    const alarmTime = document.getElementById('edit-timer-alarm').value;

    fetch(`/timers/${timerId}`, {
      method: 'PATCH',
      headers: {
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      body: JSON.stringify({
        timer: {
          name: name,
          alarm_time: alarmTime
        }
      })
    })
    .then(response => {
      if (response.ok) {
        return response.json();
      } else {
        throw new Error('Update failed');
      }
    })
    .then(data => {
      location.reload(); // Reload to show updated timer
    })
    .catch(error => {
      console.error('Error:', error);
      alert('An error occurred while updating the timer. Please try again.');
    });
  }

  // Close modal
  function closeTimerModal() {
    const modal = document.getElementById('timerModal');
    modal.style.display = 'none';
  }

  // Close modal when clicking outside
  window.onclick = function(event) {
    const modal = document.getElementById('timerModal');
    if (event.target === modal) {
      closeTimerModal();
    }
  }

  // Close modal with ESC key
  document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
      closeTimerModal();
      hideAddTimerForm();
    }
  });

  // Request notification permission on load
  if ('Notification' in window && Notification.permission === 'default') {
    Notification.requestPermission();
  }

  // Auto-start timers that are running when page loads
  document.addEventListener('DOMContentLoaded', function() {
    <% @timers.select(&:is_running).each do |timer| %>
      startClientTimer(<%= timer.id %>);
    <% end %>
  });

  // Floating menu control
  function toggleFloatingMenu() {
    const menu = document.getElementById('floatingMenu');
    const isVisible = menu.style.display === 'block';
    menu.style.display = isVisible ? 'none' : 'block';
  }

  function closeFloatingMenu() {
    document.getElementById('floatingMenu').style.display = 'none';
  }

  // Close menu when clicking outside
  document.addEventListener('click', function(event) {
    const menu = document.getElementById('floatingMenu');
    const button = document.getElementById('floatingButton');
    
    if (menu && button && !menu.contains(event.target) && !button.contains(event.target)) {
      closeFloatingMenu();
    }
  });

  // Close menu with ESC key
  document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
      closeFloatingMenu();
    }
  });
</script>

<!-- Floating Menu Button -->
<div id="floatingButton" onclick="toggleFloatingMenu()" style="position: fixed; bottom: 30px; right: 30px; width: 65px; height: 65px; background: linear-gradient(135deg, #6F4E37 0%, #4A7C59 100%); border-radius: 50%; display: flex; align-items: center; justify-content: center; cursor: pointer; box-shadow: 0 4px 20px rgba(0,0,0,0.3); z-index: 1000; transition: transform 0.3s;" onmouseover="this.style.transform='scale(1.1)'" onmouseout="this.style.transform='scale(1)'">
  <span style="color: white; font-size: 2em; font-weight: bold;">‚ãÆ</span>
</div>

<!-- Floating Menu -->
<div id="floatingMenu" style="position: fixed; bottom: 110px; right: 30px; background: white; border-radius: 15px; box-shadow: 0 4px 30px rgba(0,0,0,0.2); padding: 15px; z-index: 999; display: none; min-width: 250px;">
  <h3 style="color: #6F4E37; margin: 0 0 15px 0; padding-bottom: 10px; border-bottom: 2px solid #8B6F47; font-size: 1.1em;">Study Tools</h3>
  
  <%= link_to homes_path, class: "menu-item", style: "display: flex; align-items: center; gap: 12px; padding: 12px; text-decoration: none; color: #6F4E37; border-radius: 8px; margin-bottom: 8px; transition: background 0.2s;" do %>
    <span style="font-size: 1.5em;">üè†</span>
    <div>
      <strong style="display: block; font-size: 1em;">Home</strong>
      <small style="color: #6F4E37;">Timers & Notes</small>
    </div>
  <% end %>
  
  <%= link_to study_materials_path, class: "menu-item", style: "display: flex; align-items: center; gap: 12px; padding: 12px; text-decoration: none; color: #6F4E37; border-radius: 8px; margin-bottom: 8px; transition: background 0.2s;" do %>
    <span style="font-size: 1.5em;"><i class="fa-solid fa-pen-to-square"></i></span>
    <div>
      <strong style="display: block; font-size: 1em;">My Study Materials</strong>
      <small style="color: #6F4E37;">PDF and image upload</small>
    </div>
  <% end %>
  
  <%= link_to flashcard_collections_path, class: "menu-item", style: "display: flex; align-items: center; gap: 12px; padding: 12px; text-decoration: none; color: #6F4E37; border-radius: 8px; margin-bottom: 8px; transition: background 0.2s;" do %>
    <span style="font-size: 1.5em;"><i class="fa-solid fa-repeat"></i></span>
    <div>
      <strong style="display: block; font-size: 1em;">Flashcards</strong>
      <small style="color: #6F4E37;">Card collections</small>
    </div>
  <% end %>
  
  <%= link_to agendas_path, class: "menu-item", style: "display: flex; align-items: center; gap: 12px; padding: 12px; text-decoration: none; color: #6F4E37; border-radius: 8px; margin-bottom: 8px; transition: background 0.2s;" do %>
    <span style="font-size: 1.5em;">üìÖ</span>
    <div>
      <strong style="display: block; font-size: 1em;">My Agenda</strong>
      <small style="color: #6F4E37;">Event calendar</small>
    </div>
  <% end %>
  
  <%= link_to reminders_path, class: "menu-item", style: "display: flex; align-items: center; gap: 12px; padding: 12px; text-decoration: none; color: #6F4E37; border-radius: 8px; margin-bottom: 8px; transition: background 0.2s;" do %>
    <span style="font-size: 1.5em;">‚è∞</span>
    <div>
      <strong style="display: block; font-size: 1em;">Reminders</strong>
      <small style="color: #6F4E37;">Alarms and notes</small>
    </div>
  <% end %>
  
  <%= link_to notes_path, class: "menu-item", style: "display: flex; align-items: center; gap: 12px; padding: 12px; text-decoration: none; color: #6F4E37; border-radius: 8px; transition: background 0.2s;" do %>
    <span style="font-size: 1.5em;">üìñ</span>
    <div>
      <strong style="display: block; font-size: 1em;">Notes</strong>
      <small style="color: #6F4E37;">Study notes</small>
    </div>
  <% end %>
</div>

<style>
  .menu-item:hover {
    background: #f5ebe0 !important;
  }
</style>
